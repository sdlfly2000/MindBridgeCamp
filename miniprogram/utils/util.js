"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetLocalUserInformation = exports.Login = exports.IsLoginTokenValid = exports.UpdateUserInfo = exports.webClient = exports.FormatTime = exports.FormatDate = exports.formatTime = void 0;
exports.formatTime = function (date) {
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var hour = date.getHours();
    var minute = date.getMinutes();
    var second = date.getSeconds();
    return ([year, month, day].map(formatNumber).join('-') +
        ' ' +
        [hour, minute, second].map(formatNumber).join(':'));
};
var formatNumber = function (n) {
    var s = n.toString();
    return s[1] ? s : '0' + s;
};
exports.FormatDate = function (date) {
    return [date.getFullYear(), date.getMonth() + 1, date.getDate()].map(formatNumber).join('-');
};
exports.FormatTime = function (date) {
    return [date.getHours(), date.getMinutes()].map(formatNumber).join(':');
};
exports.webClient = function (url, httpMethod, requestData) {
    return new Promise(function (resolve, error) {
        wx.request({
            url: url,
            method: httpMethod,
            data: requestData,
            success: function (res) {
                if (res.statusCode == 200) {
                    resolve(res);
                }
                else {
                    error(res);
                }
            },
            fail: function (e) {
                console.error(e);
            }
        });
    });
};
exports.UpdateUserInfo = function (userInfo) {
    exports.webClient('');
};
exports.IsLoginTokenValid = function (app) {
    var loginToken = wx.getStorageSync("LoginToken");
    return new Promise(function (resolve, error) {
        if (loginToken == '') {
            error("LoginToken is undefined");
        }
        else {
            wx.request({
                url: app.globalData.baseUrlAuth + "WeixinLogin/IsLoginTokenValid/" + loginToken,
                success: function (res) {
                    if (res.statusCode == 200) {
                        resolve(res);
                    }
                    else {
                        error(res);
                    }
                },
                fail: function (e) {
                    console.error(e);
                }
            });
        }
    });
};
exports.Login = function (app) {
    return new Promise(function (resolve) {
        wx.login({
            success: function (res) {
                console.info("Login Code: " + res.code);
                wx.request({
                    url: app.globalData.baseUrlAuth + "WeixinLogin/GetToken",
                    data: {
                        LoginCode: res.code,
                        AppName: app.globalData.appName
                    },
                    header: {
                        'content-type': 'application/json'
                    },
                    method: 'POST',
                    success: function (response) {
                        if (response.data != undefined) {
                            wx.setStorageSync('LoginToken', response.data);
                            console.info("Login Token: " + response.data);
                            resolve(response);
                        }
                    }
                });
            },
        });
    });
};
exports.GetLocalUserInformation = function (app) {
    wx.getSetting({
        success: function (res) {
            if (res.authSetting['scope.userInfo']) {
                wx.getUserInfo({
                    success: function (res) {
                        app.globalData.userInfo = res.userInfo;
                        if (app.userInfoReadyCallback) {
                            app.userInfoReadyCallback(res);
                        }
                    }
                });
            }
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQWEsUUFBQSxVQUFVLEdBQUcsVUFBQyxJQUFVO0lBQ25DLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUMvQixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ2pDLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUMxQixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7SUFDNUIsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ2hDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUVoQyxPQUFPLENBQ0wsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQzlDLEdBQUc7UUFDSCxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FDbkQsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELElBQU0sWUFBWSxHQUFHLFVBQUMsQ0FBUztJQUM3QixJQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUE7SUFDdEIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQTtBQUMzQixDQUFDLENBQUE7QUFFWSxRQUFBLFVBQVUsR0FBRyxVQUFTLElBQVU7SUFDM0MsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDL0YsQ0FBQyxDQUFBO0FBRVksUUFBQSxVQUFVLEdBQUcsVUFBUyxJQUFVO0lBQzNDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxRSxDQUFDLENBQUE7QUFFWSxRQUFBLFNBQVMsR0FBRyxVQUFTLEdBQVcsRUFBRSxVQUFnQixFQUFFLFdBQWlCO0lBQ2hGLE9BQU8sSUFBSSxPQUFPLENBQ2hCLFVBQUMsT0FBTyxFQUFFLEtBQUs7UUFDYixFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ1QsR0FBRyxFQUFFLEdBQUc7WUFDUixNQUFNLEVBQUUsVUFBVTtZQUNsQixJQUFJLEVBQUUsV0FBVztZQUNqQixPQUFPLEVBQUUsVUFBUyxHQUFHO2dCQUNuQixJQUFHLEdBQUcsQ0FBQyxVQUFVLElBQUksR0FBRyxFQUFDO29CQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2Q7cUJBQUk7b0JBQ0gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNaO1lBQ0gsQ0FBQztZQUNELElBQUksRUFBRSxVQUFTLENBQUM7Z0JBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUNGLENBQUM7QUFDSixDQUFDLENBQUE7QUFFWSxRQUFBLGNBQWMsR0FBRyxVQUFTLFFBQWE7SUFDbEQsaUJBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNmLENBQUMsQ0FBQTtBQUVZLFFBQUEsaUJBQWlCLEdBQUcsVUFBUyxHQUFlO0lBQ3ZELElBQUksVUFBVSxHQUFVLEVBQUUsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEQsT0FBTyxJQUFJLE9BQU8sQ0FDaEIsVUFBQyxPQUFPLEVBQUUsS0FBSztRQUNiLElBQUcsVUFBVSxJQUFJLEVBQUUsRUFBQztZQUNsQixLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztTQUNsQzthQUFJO1lBQ0gsRUFBRSxDQUFDLE9BQU8sQ0FBQztnQkFDVCxHQUFHLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEdBQUcsZ0NBQWdDLEdBQUcsVUFBVTtnQkFDL0UsT0FBTyxFQUFFLFVBQVMsR0FBRztvQkFDbkIsSUFBRyxHQUFHLENBQUMsVUFBVSxJQUFJLEdBQUcsRUFBQzt3QkFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUNkO3lCQUFJO3dCQUNILEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztxQkFDWjtnQkFDSCxDQUFDO2dCQUNELElBQUksRUFBRSxVQUFTLENBQUM7b0JBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbkIsQ0FBQzthQUNGLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQyxDQUNGLENBQUM7QUFDSixDQUFDLENBQUE7QUFFWSxRQUFBLEtBQUssR0FBRyxVQUFTLEdBQWU7SUFDM0MsT0FBTyxJQUFJLE9BQU8sQ0FDaEIsVUFBQyxPQUFPO1FBQ04sRUFBRSxDQUFDLEtBQUssQ0FBQztZQUNQLE9BQU8sRUFBRSxVQUFBLEdBQUc7Z0JBQ1YsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN4QyxFQUFFLENBQUMsT0FBTyxDQUFDO29CQUNULEdBQUcsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLFdBQVcsR0FBRyxzQkFBc0I7b0JBQ3hELElBQUksRUFBQzt3QkFDSCxTQUFTLEVBQUUsR0FBRyxDQUFDLElBQUk7d0JBQ25CLE9BQU8sRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU87cUJBQ2hDO29CQUNELE1BQU0sRUFBRTt3QkFDTixjQUFjLEVBQUUsa0JBQWtCO3FCQUNuQztvQkFDRCxNQUFNLEVBQUUsTUFBTTtvQkFDZCxPQUFPLEVBQUUsVUFBUyxRQUFRO3dCQUN4QixJQUFHLFFBQVEsQ0FBQyxJQUFJLElBQUksU0FBUyxFQUFDOzRCQUM1QixFQUFFLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7NEJBQzlDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzs0QkFDOUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO3lCQUNuQjtvQkFDSCxDQUFDO2lCQUNGLENBQUMsQ0FBQTtZQUNKLENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDLENBQ0YsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVZLFFBQUEsdUJBQXVCLEdBQUcsVUFBUyxHQUFlO0lBQzdELEVBQUUsQ0FBQyxVQUFVLENBQUM7UUFDWixPQUFPLEVBQUUsVUFBQSxHQUFHO1lBQ1YsSUFBRyxHQUFHLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEVBQUM7Z0JBQ25DLEVBQUUsQ0FBQyxXQUFXLENBQUM7b0JBQ2IsT0FBTyxFQUFFLFVBQUEsR0FBRzt3QkFDVixHQUFHLENBQUMsVUFBVSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO3dCQUN2QyxJQUFHLEdBQUcsQ0FBQyxxQkFBcUIsRUFBQzs0QkFDM0IsR0FBRyxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDO3lCQUNoQztvQkFDSCxDQUFDO2lCQUNGLENBQUMsQ0FBQTthQUNIO1FBQ0gsQ0FBQztLQUNGLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBmb3JtYXRUaW1lID0gKGRhdGU6IERhdGUpID0+IHtcbiAgY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKVxuICBjb25zdCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDFcbiAgY29uc3QgZGF5ID0gZGF0ZS5nZXREYXRlKClcbiAgY29uc3QgaG91ciA9IGRhdGUuZ2V0SG91cnMoKVxuICBjb25zdCBtaW51dGUgPSBkYXRlLmdldE1pbnV0ZXMoKVxuICBjb25zdCBzZWNvbmQgPSBkYXRlLmdldFNlY29uZHMoKVxuXG4gIHJldHVybiAoXG4gICAgW3llYXIsIG1vbnRoLCBkYXldLm1hcChmb3JtYXROdW1iZXIpLmpvaW4oJy0nKSArXG4gICAgJyAnICtcbiAgICBbaG91ciwgbWludXRlLCBzZWNvbmRdLm1hcChmb3JtYXROdW1iZXIpLmpvaW4oJzonKVxuICApXG59XG5cbmNvbnN0IGZvcm1hdE51bWJlciA9IChuOiBudW1iZXIpID0+IHtcbiAgY29uc3QgcyA9IG4udG9TdHJpbmcoKVxuICByZXR1cm4gc1sxXSA/IHMgOiAnMCcgKyBzXG59XG5cbmV4cG9ydCBjb25zdCBGb3JtYXREYXRlID0gZnVuY3Rpb24oZGF0ZTogRGF0ZSl7XG4gIHJldHVybiBbZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCkgKyAxLCBkYXRlLmdldERhdGUoKV0ubWFwKGZvcm1hdE51bWJlcikuam9pbignLScpO1xufVxuXG5leHBvcnQgY29uc3QgRm9ybWF0VGltZSA9IGZ1bmN0aW9uKGRhdGU6IERhdGUpe1xuICByZXR1cm4gW2RhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCldLm1hcChmb3JtYXROdW1iZXIpLmpvaW4oJzonKTtcbn1cblxuZXhwb3J0IGNvbnN0IHdlYkNsaWVudCA9IGZ1bmN0aW9uKHVybDogc3RyaW5nLCBodHRwTWV0aG9kPzogYW55LCByZXF1ZXN0RGF0YT86IGFueSl7XG4gIHJldHVybiBuZXcgUHJvbWlzZShcbiAgICAocmVzb2x2ZSwgZXJyb3IpID0+IHtcbiAgICAgIHd4LnJlcXVlc3Qoe1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgbWV0aG9kOiBodHRwTWV0aG9kLFxuICAgICAgICBkYXRhOiByZXF1ZXN0RGF0YSxcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzKXtcbiAgICAgICAgICBpZihyZXMuc3RhdHVzQ29kZSA9PSAyMDApe1xuICAgICAgICAgICAgcmVzb2x2ZShyZXMpOyAgICAgICAgICAgIFxuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgZXJyb3IocmVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZhaWw6IGZ1bmN0aW9uKGUpe1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IFVwZGF0ZVVzZXJJbmZvID0gZnVuY3Rpb24odXNlckluZm86IGFueSl7XG4gIHdlYkNsaWVudCgnJylcbn1cblxuZXhwb3J0IGNvbnN0IElzTG9naW5Ub2tlblZhbGlkID0gZnVuY3Rpb24oYXBwOiBJQXBwT3B0aW9uKXtcbiAgbGV0IGxvZ2luVG9rZW46c3RyaW5nID0gd3guZ2V0U3RvcmFnZVN5bmMoXCJMb2dpblRva2VuXCIpO1xuICByZXR1cm4gbmV3IFByb21pc2UoXG4gICAgKHJlc29sdmUsIGVycm9yKSA9PiB7XG4gICAgICBpZihsb2dpblRva2VuID09ICcnKXtcbiAgICAgICAgZXJyb3IoXCJMb2dpblRva2VuIGlzIHVuZGVmaW5lZFwiKTtcbiAgICAgIH1lbHNle1xuICAgICAgICB3eC5yZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6IGFwcC5nbG9iYWxEYXRhLmJhc2VVcmxBdXRoICsgXCJXZWl4aW5Mb2dpbi9Jc0xvZ2luVG9rZW5WYWxpZC9cIiArIGxvZ2luVG9rZW4sXG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzKXtcbiAgICAgICAgICAgIGlmKHJlcy5zdGF0dXNDb2RlID09IDIwMCl7XG4gICAgICAgICAgICAgIHJlc29sdmUocmVzKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICBlcnJvcihyZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZmFpbDogZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICApO1xufVxuXG5leHBvcnQgY29uc3QgTG9naW4gPSBmdW5jdGlvbihhcHA6IElBcHBPcHRpb24pe1xuICByZXR1cm4gbmV3IFByb21pc2UoXG4gICAgKHJlc29sdmUpID0+IHtcbiAgICAgIHd4LmxvZ2luKHtcbiAgICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgICBjb25zb2xlLmluZm8oXCJMb2dpbiBDb2RlOiBcIiArIHJlcy5jb2RlKTsgICAgICBcbiAgICAgICAgICB3eC5yZXF1ZXN0KHtcbiAgICAgICAgICAgIHVybDogYXBwLmdsb2JhbERhdGEuYmFzZVVybEF1dGggKyBcIldlaXhpbkxvZ2luL0dldFRva2VuXCIsXG4gICAgICAgICAgICBkYXRhOntcbiAgICAgICAgICAgICAgTG9naW5Db2RlOiByZXMuY29kZSxcbiAgICAgICAgICAgICAgQXBwTmFtZTogYXBwLmdsb2JhbERhdGEuYXBwTmFtZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhlYWRlcjoge1xuICAgICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSl7ICAgICAgICAgIFxuICAgICAgICAgICAgICBpZihyZXNwb25zZS5kYXRhICE9IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgd3guc2V0U3RvcmFnZVN5bmMoJ0xvZ2luVG9rZW4nLCByZXNwb25zZS5kYXRhKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkxvZ2luIFRva2VuOiBcIiArIHJlc3BvbnNlLmRhdGEpOyBcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICB9KSBcbiAgICB9XG4gICkgXG59XG5cbmV4cG9ydCBjb25zdCBHZXRMb2NhbFVzZXJJbmZvcm1hdGlvbiA9IGZ1bmN0aW9uKGFwcDogSUFwcE9wdGlvbil7XG4gIHd4LmdldFNldHRpbmcoe1xuICAgIHN1Y2Nlc3M6IHJlcyA9PiB7XG4gICAgICBpZihyZXMuYXV0aFNldHRpbmdbJ3Njb3BlLnVzZXJJbmZvJ10pe1xuICAgICAgICB3eC5nZXRVc2VySW5mbyh7XG4gICAgICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgICAgIGFwcC5nbG9iYWxEYXRhLnVzZXJJbmZvID0gcmVzLnVzZXJJbmZvO1xuICAgICAgICAgICAgaWYoYXBwLnVzZXJJbmZvUmVhZHlDYWxsYmFjayl7XG4gICAgICAgICAgICAgIGFwcC51c2VySW5mb1JlYWR5Q2FsbGJhY2socmVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuIl19