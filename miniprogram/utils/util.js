"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetLocalUserInformation = exports.Login = exports.IsLoginTokenValid = exports.UpdateUserInfo = exports.webClient = exports.FormatTime = exports.FormatDate = exports.formatTime = void 0;
exports.formatTime = function (date) {
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var hour = date.getHours();
    var minute = date.getMinutes();
    var second = date.getSeconds();
    return ([year, month, day].map(formatNumber).join('-') +
        ' ' +
        [hour, minute, second].map(formatNumber).join(':'));
};
var formatNumber = function (n) {
    var s = n.toString();
    return s[1] ? s : '0' + s;
};
exports.FormatDate = function (date) {
    return [date.getFullYear(), date.getMonth() + 1, date.getDate()].map(formatNumber).join('-');
};
exports.FormatTime = function (date) {
    return [date.getHours(), date.getMinutes()].map(formatNumber).join(':');
};
exports.webClient = function (url, httpMethod, requestData) {
    return new Promise(function (resolve, error) {
        wx.request({
            url: url,
            method: httpMethod,
            data: requestData,
            success: function (res) {
                if (res.statusCode == 200) {
                    resolve(res);
                }
                else {
                    error(res);
                }
            },
            fail: function (e) {
                console.error(e);
            }
        });
    });
};
exports.UpdateUserInfo = function (app, userInfo) {
    var loginToken = wx.getStorageSync("LoginToken");
    var updateUserInfoUrl = app.globalData.baseUrlApp + "User/UpdateUserInfo/" + loginToken;
    var userInfoData = {
        NickName: userInfo.NickName,
        AvatarUrl: userInfo.AvatarUrl,
        Country: userInfo.Country,
        Province: userInfo.Province,
        City: userInfo.City,
        Language: userInfo.Language
    };
    exports.webClient(updateUserInfoUrl, "POST", userInfoData)
        .catch(function (res) { return console.error(res); });
};
exports.IsLoginTokenValid = function (app) {
    var loginToken = wx.getStorageSync("LoginToken");
    return new Promise(function (resolve, error) {
        if (loginToken == '') {
            error("LoginToken is undefined");
        }
        else {
            wx.request({
                url: app.globalData.baseUrlAuth + "WeixinLogin/IsLoginTokenValid/" + loginToken,
                success: function (res) {
                    if (res.statusCode == 200) {
                        resolve(res);
                    }
                    else {
                        error(res);
                    }
                },
                fail: function (e) {
                    console.error(e);
                }
            });
        }
    });
};
exports.Login = function (app) {
    return new Promise(function (resolve, error) {
        wx.login({
            success: function (res) {
                console.info("Login Code: " + res.code);
                wx.request({
                    url: app.globalData.baseUrlAuth + "WeixinLogin/GetToken",
                    data: {
                        LoginCode: res.code,
                        AppName: app.globalData.appName
                    },
                    header: {
                        'content-type': 'application/json'
                    },
                    method: 'POST',
                    success: function (response) {
                        if (response.data != undefined) {
                            wx.setStorageSync('LoginToken', response.data);
                            console.info("Login Token: " + response.data);
                            resolve(response);
                        }
                        else {
                            error(response);
                        }
                    },
                    fail: function (res) {
                        error(res);
                    }
                });
            },
        });
    });
};
exports.GetLocalUserInformation = function (app) {
    app.userInfoReadyCallback = function (res) {
        app.globalData.userInfo = res.userInfo;
    };
    wx.getSetting({
        success: function (res) {
            if (res.authSetting['scope.userInfo']) {
                wx.getUserInfo({
                    success: function (res) {
                        app.globalData.userInfo = res.userInfo;
                        console.info("UserInfoï¼š" + JSON.stringify(res.userInfo));
                        if (app.userInfoReadyCallback) {
                            app.userInfoReadyCallback(res);
                        }
                    }
                });
            }
        }
    });
};
//# sourceMappingURL=data:application/json;base64,